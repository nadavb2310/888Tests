- name: Add local deploy user
  win_user:
    name: 888deploy
    password: "{{ user_deploy_password }}"
    user_cannot_change_password: yes
    fullname: "888 IIS Deploy User"
    description: "888 IIS Deploy User"
    groups: ["Users, Administrators"]
    password_never_expires: yes
    state: present
  when: is_aws_environment

- name: Run as Administrator
  win_shell: |
    $ShortcutFile = "{{ item }}"
    $bytes = [IO.File]::ReadAllBytes("$ShortcutFile")
    $bytes[0x15] = $bytes[0x15] -bor 0x20 #set byte 21 (0x15) bit 6 (0x20) ON
    [IO.File]::WriteAllBytes("$ShortcutFile", $bytes)
  with_items:
    - 'C:\Users\Public\Desktop\cmd.lnk'
    - 'C:\Users\Public\Desktop\Notepad++.lnk'

- name: Copy logon script
  win_copy:
    src: ../scripts/pin2tb.ps1
    dest: C:\Users\Public\pin2tb.ps1

- name: Set logon script to run for each user
  win_shell: |
    reg load HKU\DefUser 'c:\Users\Default\NTUSER.DAT'
    reg add HKU\DefUser\Software\Microsoft\Windows\CurrentVersion\Runonce /v Pin2TB /t REG_EXPAND_SZ /d 'powershell -windowstyle hidden c:\Users\Public\pin2tb.ps1' /f
    reg unload HKU\DefUser


- name: Disable Server Manager from running at startup for each user
  win_shell: Get-ScheduledTask -TaskName ServerManager | Disable-ScheduledTask -Verbose
  when: is_aws_environment

- name: Install Telnet
  win_shell: |
    Install-WindowsFeature -Name Telnet-Client -source C:\\Windows\\WinSxS
  ignore_errors: true



- name: Wait for ansible connection to host
  wait_for_connection:
    delay: 7
    timeout: 60
  when: is_aws_environment

- name: Set secondary IP on AWS
  win_command: "netsh interface ipv4 add address Ethernet {{ secondary_ip }} 255.255.255.0"
  when: secondary_ip is defined and is_aws_environment

- name: Set DNS on AWS
  win_command: "netsh interface ip set dns Ethernet static {{ first_two_bytes }}.0.2"
  when: secondary_ip is defined and is_aws_environment
